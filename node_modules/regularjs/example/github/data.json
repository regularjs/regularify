[
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14184",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14184/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14184/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14184/events",
    "html_url": "https://github.com/rails/rails/issues/14184",
    "id": 28189717,
    "number": 14184,
    "title": "has_many association & autosave: false (rails 4)",
    "user": {
      "login": "timmi-on-rails",
      "id": 6745700,
      "avatar_url": "https://avatars.githubusercontent.com/u/6745700?",
      "gravatar_id": "276e2d1a2159139f8a43397c7ecaac18",
      "url": "https://api.github.com/users/timmi-on-rails",
      "html_url": "https://github.com/timmi-on-rails",
      "followers_url": "https://api.github.com/users/timmi-on-rails/followers",
      "following_url": "https://api.github.com/users/timmi-on-rails/following{/other_user}",
      "gists_url": "https://api.github.com/users/timmi-on-rails/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timmi-on-rails/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timmi-on-rails/subscriptions",
      "organizations_url": "https://api.github.com/users/timmi-on-rails/orgs",
      "repos_url": "https://api.github.com/users/timmi-on-rails/repos",
      "events_url": "https://api.github.com/users/timmi-on-rails/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timmi-on-rails/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/stale",
        "name": "stale",
        "color": "444444"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-02-24T19:40:43Z",
    "updated_at": "2014-05-27T16:29:18Z",
    "closed_at": null,
    "body": "Rails skips validations when manually saving child instances, while autosave has been turned off.\r\n\r\nI have got the following simplified model of houses with rooms. \r\n<pre>\r\nclass House &lt; ActiveRecord::Base\r\n  has_many :rooms, inverse_of: :house, autosave: false\r\nend\r\n\r\nclass Room &lt; ActiveRecord::Base\r\n  belongs_to :house, inverse_of: :rooms\r\n\r\n  validates :house, presence: true\r\nend\r\n</pre>\r\n\r\nI validate, that every room has to have a house.\r\nNow I create a house instance and an associated room and save the house instance.\r\n<pre>\r\nhouse = House.new\r\nroom = house.rooms.new\r\nhouse.save\r\n</pre>\r\nSince I use inverse_of, my room should be up to date and I check the house and try to save the room.\r\n<pre>\r\nroom.house\r\n=> #&lt;House id: 13, name: nil, created_at: \"2014-02-24 19:28:59\", updated_at: \"2014-02-24 19:28:59\">\r\nroom.save\r\n</pre>\r\nEverythings works, validation does not complain, <b>but</b> if I check the created room it has \"house_id = nil\".\r\n<pre>\r\n=> #&lt;Room id: 30, name: nil, house_id: nil, created_at: \"2014-02-24 19:34:22\", updated_at: \"2014-02-24 19:34:22\">\r\n</pre>\r\n\r\nSaving the house first and then calling house.rooms.new however works. But its not obvious to me that my way of doing it is prohibited, since the house seems to be linked correctly and validations do not fail. The documentation does not give any example about autosave => false, so I am clueless whether this is a bug or if it's simply prohibited to call rooms.new on a new record, when autosave is false ?\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14183",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14183/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14183/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14183/events",
    "html_url": "https://github.com/rails/rails/issues/14183",
    "id": 28187820,
    "number": 14183,
    "title": "Rails 4.1.0.rc1 - Stack level too deep when over approx. 430 \"has_one\" relations",
    "user": {
      "login": "john-999",
      "id": 3640027,
      "avatar_url": "https://avatars.githubusercontent.com/u/3640027?",
      "gravatar_id": null,
      "url": "https://api.github.com/users/john-999",
      "html_url": "https://github.com/john-999",
      "followers_url": "https://api.github.com/users/john-999/followers",
      "following_url": "https://api.github.com/users/john-999/following{/other_user}",
      "gists_url": "https://api.github.com/users/john-999/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/john-999/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/john-999/subscriptions",
      "organizations_url": "https://api.github.com/users/john-999/orgs",
      "repos_url": "https://api.github.com/users/john-999/repos",
      "events_url": "https://api.github.com/users/john-999/events{/privacy}",
      "received_events_url": "https://api.github.com/users/john-999/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2014-02-24T19:16:44Z",
    "updated_at": "2014-03-03T08:52:06Z",
    "closed_at": null,
    "body": "Rails has a scaling issue:\r\n\r\n(This seems pretty serious to me since it severly restricts your architecture.)\r\n\r\nWhen you have \"a lot\" of relations of the type \"Book has_one Page\" (see below) and you try to create (save) a new Book (that has just 1 Page), then Rails will throw a \"stack level too deep\" error, when the number of these relations reaches about 430 (+/- 10, in my case at least).\r\n\r\nI don't know if the fact that they are nested models plays a role in this.\r\n\r\n```\r\nclass Book < ActiveRecord::Base\r\n  has_one :page_a\r\n  accepts_nested_attributes_for :page_a\r\n  \r\n  has_one :page_b\r\n  accepts_nested_attributes_for :page_b\r\n\r\n  has_one :page_c\r\n  accepts_nested_attributes_for :page_c\r\n  .\r\n  .\r\n  .\r\n  (= \"a lot\")\r\nend\r\n```\r\n\r\n```\r\nclass PageA < ActiveRecord::Base\r\n  belongs_to :book\r\n  self.table_name = 'page_as'\r\nend\r\nclass PageB < ActiveRecord::Base\r\n  belongs_to :book\r\n  self.table_name = 'page_bs'\r\nend\r\nclass PageC < ActiveRecord::Base\r\n  belongs_to :book\r\n  self.table_name = 'page_cs'\r\nend\r\n.\r\n.\r\n.\r\n(= \"a lot\")\r\n```"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14180",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14180/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14180/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14180/events",
    "html_url": "https://github.com/rails/rails/pull/14180",
    "id": 28173414,
    "number": 14180,
    "title": "Honor public/private in ActionView::Helpers::Tags::Base#value",
    "user": {
      "login": "PragTob",
      "id": 606517,
      "avatar_url": "https://avatars.githubusercontent.com/u/606517?",
      "gravatar_id": "8480daec7137f28565bc2d2e666b915a",
      "url": "https://api.github.com/users/PragTob",
      "html_url": "https://github.com/PragTob",
      "followers_url": "https://api.github.com/users/PragTob/followers",
      "following_url": "https://api.github.com/users/PragTob/following{/other_user}",
      "gists_url": "https://api.github.com/users/PragTob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PragTob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PragTob/subscriptions",
      "organizations_url": "https://api.github.com/users/PragTob/orgs",
      "repos_url": "https://api.github.com/users/PragTob/repos",
      "events_url": "https://api.github.com/users/PragTob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PragTob/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-02-24T16:13:48Z",
    "updated_at": "2014-02-24T16:39:38Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14180",
      "html_url": "https://github.com/rails/rails/pull/14180",
      "diff_url": "https://github.com/rails/rails/pull/14180.diff",
      "patch_url": "https://github.com/rails/rails/pull/14180.patch"
    },
    "body": "* use public_send instead of send to avoid calling private methods in form helpers\r\n\r\nI do not know if this feature is wanted, but it was simple enough to implement so I just went ahead and did it.\r\n\r\nI discovered this together with a bug in MRI/simple_delegator.\r\nE.g. When you have an object using `SimpleDelegator` that has an `open` method which you try to call with `send` it ends up calling an `open` method somewhere in Ruby that wants 1..3 arguments in Ruby 2.0. Too bad if you have an attribute named open.\r\n( see [this gist](https://gist.github.com/PragTob/9189371) for a sample)\r\n\r\nThat does not happen with public_send. However that is a bug somewhere else. So writing a test for it seemed too hard so I wrote a simple honor public/private test. Any suggestions for a better testing of this?\r\n\r\nI do think that in general it'd be good to honor public/private in this case. What do you think?\r\n\r\nCheers,\r\nTobi"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14178",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14178/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14178/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14178/events",
    "html_url": "https://github.com/rails/rails/issues/14178",
    "id": 28162089,
    "number": 14178,
    "title": "ActiveSupport::TimeWithZone#eql?(self.dup) returns false, if created from DateTime object",
    "user": {
      "login": "meismann",
      "id": 1921091,
      "avatar_url": "https://avatars.githubusercontent.com/u/1921091?",
      "gravatar_id": "e03ce645e8e84520f26cbe8c4d998451",
      "url": "https://api.github.com/users/meismann",
      "html_url": "https://github.com/meismann",
      "followers_url": "https://api.github.com/users/meismann/followers",
      "following_url": "https://api.github.com/users/meismann/following{/other_user}",
      "gists_url": "https://api.github.com/users/meismann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meismann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meismann/subscriptions",
      "organizations_url": "https://api.github.com/users/meismann/orgs",
      "repos_url": "https://api.github.com/users/meismann/repos",
      "events_url": "https://api.github.com/users/meismann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meismann/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-02-24T13:46:31Z",
    "updated_at": "2014-05-17T19:39:27Z",
    "closed_at": null,
    "body": "When creating an `ActiveSupport::TimeWithZone` from a `DateTime` object like so, I expect `#eql?` to return true:\r\n\r\n```\r\n2.1-head :001 > n = DateTime.now.in_time_zone\r\n=> Mon, 24 Feb 2014 12:33:43 UTC +00:00\r\n2.1-head :002 > n.eql? n.dup\r\n => false\r\n```\r\nHere is the faulty code in `ActiveSupport::TimeWithZone#eql?`:\r\n```\r\ndef eql?(other)\r\n  utc.eql?(other)\r\nend\r\n```\r\n`#utc` returns the original DateTime object, whose `#eql?` cannot handle a comparison with an `ActiveSupport::TimeWithZone` correctly.\r\n\r\nThis is bad for example in Hash merging, because comparison of Hash keys is done with `#eql?`:\r\n\r\n```\r\n2.1-head :009 > h1 = { n => 1 }; h2 = { n.dup => 2 }\r\n2.1-head :010 > h1.merge h2\r\n# Expecting a Hash with a single key here with the value 2:\r\n => {Mon, 24 Feb 2014 13:23:24 UTC +00:00=>1, Mon, 24 Feb 2014 13:23:24 UTC +00:00=>2} \r\n```\r\nHowever, if the `ActiveSupport::TimeWithZone` object is created from a `Time` object instead of from a `DateTime` object, the code works as expected:\r\n```\r\n2.1-head :004 > n = Time.now.in_time_zone\r\n => Mon, 24 Feb 2014 13:07:37 UTC +00:00 \r\n2.1-head :005 > n.eql? n.dup\r\n => true \r\n```\r\nThe issue occurs in Rails 4.0.3, Rails 4.1.0. rc, and on Ruby versions 2.1-head as well as 2.0.0. It was mentioned in #3431, but not solved."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14176",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14176/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14176/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14176/events",
    "html_url": "https://github.com/rails/rails/issues/14176",
    "id": 28161541,
    "number": 14176,
    "title": "Migrator fails for systems with multiple, shared databases",
    "user": {
      "login": "axos88",
      "id": 1281218,
      "avatar_url": "https://avatars.githubusercontent.com/u/1281218?",
      "gravatar_id": "aaa0d23522b46dfe52e90c41cfeff2a3",
      "url": "https://api.github.com/users/axos88",
      "html_url": "https://github.com/axos88",
      "followers_url": "https://api.github.com/users/axos88/followers",
      "following_url": "https://api.github.com/users/axos88/following{/other_user}",
      "gists_url": "https://api.github.com/users/axos88/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/axos88/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/axos88/subscriptions",
      "organizations_url": "https://api.github.com/users/axos88/orgs",
      "repos_url": "https://api.github.com/users/axos88/repos",
      "events_url": "https://api.github.com/users/axos88/events{/privacy}",
      "received_events_url": "https://api.github.com/users/axos88/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/stale",
        "name": "stale",
        "color": "444444"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": {
      "url": "https://api.github.com/repos/rails/rails/milestones/24",
      "labels_url": "https://api.github.com/repos/rails/rails/milestones/24/labels",
      "id": 297919,
      "number": 24,
      "title": "4.2.0",
      "description": "",
      "creator": {
        "login": "rafaelfranca",
        "id": 47848,
        "avatar_url": "https://avatars.githubusercontent.com/u/47848?",
        "gravatar_id": "0525b332aafb83307b32d9747a93de03",
        "url": "https://api.github.com/users/rafaelfranca",
        "html_url": "https://github.com/rafaelfranca",
        "followers_url": "https://api.github.com/users/rafaelfranca/followers",
        "following_url": "https://api.github.com/users/rafaelfranca/following{/other_user}",
        "gists_url": "https://api.github.com/users/rafaelfranca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rafaelfranca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rafaelfranca/subscriptions",
        "organizations_url": "https://api.github.com/users/rafaelfranca/orgs",
        "repos_url": "https://api.github.com/users/rafaelfranca/repos",
        "events_url": "https://api.github.com/users/rafaelfranca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rafaelfranca/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 72,
      "closed_issues": 66,
      "state": "open",
      "created_at": "2013-03-27T19:29:42Z",
      "updated_at": "2014-07-17T17:57:07Z",
      "due_on": "2014-10-01T07:00:00Z"
    },
    "comments": 2,
    "created_at": "2014-02-24T13:38:06Z",
    "updated_at": "2014-05-27T16:29:17Z",
    "closed_at": null,
    "body": "Hello!\r\n\r\nI have found that the root of the problem I am describing is the method how the ActiveRecord migrator detects the migrations that need to be run.\r\n\r\nThe problem surfaces only in more complex systems, and can be more easily imagined to arise with rails, but it is independent from rails and might arise with gems as well.\r\n\r\nSuppose the following scenario:\r\n\r\nTwo rails applications, sharing a database, while having their on database as well. (3 databases, 2 applicaitons)\r\n\r\nIn order to reduce code duplication and maintenance hell, we create a rails engine that will contain the models and migrations for the shared database.\r\n\r\n```ruby\r\n     initializer :shared_db_append_migrations do |app|\r\n        unless app.root.to_s.match root.to_s\r\n          require 'shared-db-common/migration_base'\r\n\r\n          config.paths[\"db/migrate\"].expanded.each do |expanded_path|\r\n            app.config.paths[\"db/migrate\"] << expanded_path\r\n          end\r\n        end\r\n      end\r\n```\r\n\r\nBoth applications include the common engine and use the models from there.\r\n\r\nThe models in the engine have a superclass that tells them to use a different connection than the default one: \r\n\r\n```ruby\r\nclass Base < ActiveRecord::Base\r\n  self.abstract_class = true\r\n\r\n  begin\r\n    establish_connection \"shared_db_#{Rails.env}\"\r\n  rescue ActiveRecord::AdapterNotSpecified\r\n    establish_connection \"#{Rails.env}\"\r\n  end\r\nend\r\n```\r\n\r\nThe migrations in the engines likewise:\r\n\r\n```ruby\r\nclass MigrationBase < ActiveRecord::Migration\r\n  def connection\r\n    begin\r\n      ActiveRecord::Base.establish_connection(\"shared_db_#{Rails.env}\").connection\r\n    rescue ActiveRecord::AdapterNotSpecified\r\n      super\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThe engine tells the main application to include its migrations in their search path.\r\n\r\nWhen running the migrations for the first application, everything runs fine, the shared database migrations are ran as well. GOOD!\r\n\r\nWhen running the migrations for the seconds application, they fail. They try re-running the shared migrations. \r\n\r\nI have found that the ActiveRecord migrator tries connecting to the main database, reading out the schema_migrations table, and trying to build a list of all migrations BEFORE connecting to the actual databases that the migrations will run on, and then going through the list, running them one by one.\r\nActiveRecord will save the migration state back to the main database, instead of the database they have run on.\r\n\r\nThis presents a problem because it actually ties the database state to the applicaiton, and not to the database itself. When the second application runs, it will see the migrations as not to have run, and tries rerunning them.\r\n\r\nThe correct way to implement it would be to create a list of all database migrations, order them by timestamp (btw, why are we using only second-based timestamps, and not something finer like microsecs or nanosecs to avoid collisions in the schema_migrations table? Or a timestamp and a hash of the file itself to make sure they have not been changed since they ran?), and then go through the FULL list of migrations, and look them up in the CORRECT database's schema_versions table, and run them if not present.\r\n\r\nThis is a major change in the execution way, and even though it is less effective (we need to do a lot of lookups to the schema_versions table), the time for that is negligible comparing to the time that the actual migrations run, and would fix the issue I am describing. The database state would not end up being saved to another database either.\r\n\r\nIn a nutshell.\r\n\r\n  Rails App A with DB A\r\n  Rails App B with DB B\r\n  Rails Engine S with DB S\r\n\r\nboth rails apps include the engine S, and have a different connection string named shared_db_development, shared_db_production, etc for those models.\r\n\r\nWhen App A runs the migrations:\r\n  - schema versions is looked up from DB A\r\n  - migrations are run from Rails APP A, Rails Engine S\r\n  - new migration state is saved back to DB A\r\n\r\nWhen App B runs the migrations:\r\n  - schema versions is looked up from DB B\r\n  - migrations are run from Rails APP B\r\n  - migrations appear to not have run from Engine S (becasue not present in schema versions in DB B), and are attempted to run again\r\n  - Exception occurs.\r\n\r\nSolution:\r\n  - save and load schema_versions state from the database connection specified by the migration itself, not the migrator, and AcitveRecord::Base.\r\n\r\n\r\nPlease let me know what you think,\r\n  Akos Vandra\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14173",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14173/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14173/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14173/events",
    "html_url": "https://github.com/rails/rails/issues/14173",
    "id": 28141753,
    "number": 14173,
    "title": "render_to_string changes content-type for subsequent render",
    "user": {
      "login": "luckyruby",
      "id": 1135026,
      "avatar_url": "https://avatars.githubusercontent.com/u/1135026?",
      "gravatar_id": "2a9d7f2c31d4a7a011b2d24cad9e3d4f",
      "url": "https://api.github.com/users/luckyruby",
      "html_url": "https://github.com/luckyruby",
      "followers_url": "https://api.github.com/users/luckyruby/followers",
      "following_url": "https://api.github.com/users/luckyruby/following{/other_user}",
      "gists_url": "https://api.github.com/users/luckyruby/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luckyruby/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luckyruby/subscriptions",
      "organizations_url": "https://api.github.com/users/luckyruby/orgs",
      "repos_url": "https://api.github.com/users/luckyruby/repos",
      "events_url": "https://api.github.com/users/luckyruby/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luckyruby/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 11,
    "created_at": "2014-02-24T06:59:56Z",
    "updated_at": "2014-06-27T05:01:40Z",
    "closed_at": null,
    "body": "In Rails 3.2.16:\r\n\r\n```ruby\r\n  def locations\r\n    @locations = Location.all\r\n    stream = render_to_string(template: \"locations/index\", formats: [:xml])\r\n    render nothing: true\r\n  end\r\n```\r\nI would expect a blank page when I hit this controller action from my browser but I get an XML parsing error in Firefox instead. It seems that render_to_string is changing the content-type response header. Is that expected behavior?"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14169",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14169/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14169/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14169/events",
    "html_url": "https://github.com/rails/rails/issues/14169",
    "id": 28117167,
    "number": 14169,
    "title": "rake db:schema:dump ignores type of non-numeric primary key",
    "user": {
      "login": "lsimoneau",
      "id": 31768,
      "avatar_url": "https://avatars.githubusercontent.com/u/31768?",
      "gravatar_id": "b95de317ddc21d724cf14c6096bb9424",
      "url": "https://api.github.com/users/lsimoneau",
      "html_url": "https://github.com/lsimoneau",
      "followers_url": "https://api.github.com/users/lsimoneau/followers",
      "following_url": "https://api.github.com/users/lsimoneau/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsimoneau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsimoneau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsimoneau/subscriptions",
      "organizations_url": "https://api.github.com/users/lsimoneau/orgs",
      "repos_url": "https://api.github.com/users/lsimoneau/repos",
      "events_url": "https://api.github.com/users/lsimoneau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsimoneau/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": {
      "login": "sgrif",
      "id": 1529387,
      "avatar_url": "https://avatars.githubusercontent.com/u/1529387?",
      "gravatar_id": "0f674817f8c6e149518f0a4b4ad3d560",
      "url": "https://api.github.com/users/sgrif",
      "html_url": "https://github.com/sgrif",
      "followers_url": "https://api.github.com/users/sgrif/followers",
      "following_url": "https://api.github.com/users/sgrif/following{/other_user}",
      "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions",
      "organizations_url": "https://api.github.com/users/sgrif/orgs",
      "repos_url": "https://api.github.com/users/sgrif/repos",
      "events_url": "https://api.github.com/users/sgrif/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sgrif/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 6,
    "created_at": "2014-02-23T11:47:35Z",
    "updated_at": "2014-07-02T20:32:03Z",
    "closed_at": null,
    "body": "When running `rake db:schema:dump` on a legacy schema with a table like the following:\r\n\r\n```sql\r\nCREATE TABLE `hashes` (\r\n  `recordcount` tinyint(4) NOT NULL,\r\n  `timecreated` datetime NOT NULL,\r\n  `sha` varchar(40) NOT NULL DEFAULT '',\r\n  PRIMARY KEY (`sha`),\r\n  KEY `timecreated` (`timecreated`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\r\n```\r\n\r\nRails produces the following schema information:\r\n\r\n```ruby\r\ncreate_table \"hashes\", primary_key: \"sha\", force: true do |t|\r\n  t.integer \"recordcount\", limit 1, null: false\r\n  t.datetime \"timecreated\", null: false\r\nend\r\n```\r\n\r\nThe string type of the `sha` field is lost, so when re-creating a database from the schema we wind up with an auto-incrementing integer field instead of a varchar.\r\n\r\nInterestingly, on another similar table where the hash key is part of a compound primary key, the information is preserved and the table is re-created correctly."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14161",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14161/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14161/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14161/events",
    "html_url": "https://github.com/rails/rails/pull/14161",
    "id": 28103288,
    "number": 14161,
    "title": "'Where' (.not) with polymorphic association in AR::Relation bug fix",
    "user": {
      "login": "konukhov",
      "id": 815817,
      "avatar_url": "https://avatars.githubusercontent.com/u/815817?",
      "gravatar_id": "a6e248644d5083518382a6e9f8f9ec38",
      "url": "https://api.github.com/users/konukhov",
      "html_url": "https://github.com/konukhov",
      "followers_url": "https://api.github.com/users/konukhov/followers",
      "following_url": "https://api.github.com/users/konukhov/following{/other_user}",
      "gists_url": "https://api.github.com/users/konukhov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/konukhov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/konukhov/subscriptions",
      "organizations_url": "https://api.github.com/users/konukhov/orgs",
      "repos_url": "https://api.github.com/users/konukhov/repos",
      "events_url": "https://api.github.com/users/konukhov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/konukhov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-02-22T20:05:07Z",
    "updated_at": "2014-02-23T08:55:16Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14161",
      "html_url": "https://github.com/rails/rails/pull/14161",
      "diff_url": "https://github.com/rails/rails/pull/14161.diff",
      "patch_url": "https://github.com/rails/rails/pull/14161.patch"
    },
    "body": "Hi!\r\n\r\nWhile working on a Rails 4 app I ran into a nasty bug that builds wrong queries for polymorphic associations.\r\n\r\nHere's an example:\r\n\r\n```ruby\r\nclass Like < ActiveRecord::Base\r\n  belongs_to :likeable, polymorphic: true\r\nend\r\n```\r\n\r\nIn current versions of Rails it works this way:\r\n```ruby\r\nLike.where.not(likeable: Post.first).to_sql \r\n=> \"... where (likes.likeable_type != 'Post') and (likes.likeable_id != 1)\"\r\n```\r\nThis query finds all likes whose likeables are not a 'Post' and their ids are not 1. This behavior is wrong.\r\n\r\n\r\nThe idea is to use parentheses around both polymorphic conditions to treat them as a unified expression.\r\n\r\nHere's how it works in this PR:\r\n\r\n```ruby\r\nLike.where(likeable: Post.first).to_sql\r\n=> \"... where (likes.likeable_type = 'Post' and likes.likeable_id = 1)\"\r\n\r\nLike.where.not(likeable: Post.first).to_sql\r\n=> \"... where (not (likes.likeable_type = 'Post' and likes.likeable_id = 1))\"\r\n```"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14157",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14157/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14157/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14157/events",
    "html_url": "https://github.com/rails/rails/pull/14157",
    "id": 28090746,
    "number": 14157,
    "title": "ActiveSupport#Cache :race_condition_ttl option handling not optimal",
    "user": {
      "login": "niclas",
      "id": 3457,
      "avatar_url": "https://avatars.githubusercontent.com/u/3457?",
      "gravatar_id": "b436ee8a3631036ff23f7535848cc8f5",
      "url": "https://api.github.com/users/niclas",
      "html_url": "https://github.com/niclas",
      "followers_url": "https://api.github.com/users/niclas/followers",
      "following_url": "https://api.github.com/users/niclas/following{/other_user}",
      "gists_url": "https://api.github.com/users/niclas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/niclas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/niclas/subscriptions",
      "organizations_url": "https://api.github.com/users/niclas/orgs",
      "repos_url": "https://api.github.com/users/niclas/repos",
      "events_url": "https://api.github.com/users/niclas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/niclas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-02-22T06:35:49Z",
    "updated_at": "2014-02-22T16:51:46Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14157",
      "html_url": "https://github.com/rails/rails/pull/14157",
      "diff_url": "https://github.com/rails/rails/pull/14157.diff",
      "patch_url": "https://github.com/rails/rails/pull/14157.patch"
    },
    "body": "nil.to_i ==> 0, e.g. second condition is always evaluated here..."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14150",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14150/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14150/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14150/events",
    "html_url": "https://github.com/rails/rails/issues/14150",
    "id": 28072789,
    "number": 14150,
    "title": "broken  4.0.3 ActiveModel::AttributeMethods::ClassMethods help page",
    "user": {
      "login": "bughit",
      "id": 895588,
      "avatar_url": "https://avatars.githubusercontent.com/u/895588?",
      "gravatar_id": null,
      "url": "https://api.github.com/users/bughit",
      "html_url": "https://github.com/bughit",
      "followers_url": "https://api.github.com/users/bughit/followers",
      "following_url": "https://api.github.com/users/bughit/following{/other_user}",
      "gists_url": "https://api.github.com/users/bughit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bughit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bughit/subscriptions",
      "organizations_url": "https://api.github.com/users/bughit/orgs",
      "repos_url": "https://api.github.com/users/bughit/repos",
      "events_url": "https://api.github.com/users/bughit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bughit/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/docs",
        "name": "docs",
        "color": "02d7e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/third+party+issue",
        "name": "third party issue",
        "color": "02d7e1"
      }
    ],
    "state": "open",
    "assignee": {
      "login": "fxn",
      "id": 3387,
      "avatar_url": "https://avatars.githubusercontent.com/u/3387?",
      "gravatar_id": "7223c62b7310e164eb79c740188abbda",
      "url": "https://api.github.com/users/fxn",
      "html_url": "https://github.com/fxn",
      "followers_url": "https://api.github.com/users/fxn/followers",
      "following_url": "https://api.github.com/users/fxn/following{/other_user}",
      "gists_url": "https://api.github.com/users/fxn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fxn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fxn/subscriptions",
      "organizations_url": "https://api.github.com/users/fxn/orgs",
      "repos_url": "https://api.github.com/users/fxn/repos",
      "events_url": "https://api.github.com/users/fxn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fxn/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 5,
    "created_at": "2014-02-21T21:03:31Z",
    "updated_at": "2014-05-02T18:15:11Z",
    "closed_at": null,
    "body": "\r\nhttp://api.rubyonrails.org/v4.0.2/classes/ActiveModel/AttributeMethods/ClassMethods.html\r\nhttp://api.rubyonrails.org/v4.0.3/classes/ActiveModel/AttributeMethods/ClassMethods.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14148",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14148/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14148/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14148/events",
    "html_url": "https://github.com/rails/rails/issues/14148",
    "id": 28071758,
    "number": 14148,
    "title": "HABTM table name generation regression.",
    "user": {
      "login": "acoffman",
      "id": 13370,
      "avatar_url": "https://avatars.githubusercontent.com/u/13370?",
      "gravatar_id": "28a605474879ab04b8e95cfa864f2123",
      "url": "https://api.github.com/users/acoffman",
      "html_url": "https://github.com/acoffman",
      "followers_url": "https://api.github.com/users/acoffman/followers",
      "following_url": "https://api.github.com/users/acoffman/following{/other_user}",
      "gists_url": "https://api.github.com/users/acoffman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acoffman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acoffman/subscriptions",
      "organizations_url": "https://api.github.com/users/acoffman/orgs",
      "repos_url": "https://api.github.com/users/acoffman/repos",
      "events_url": "https://api.github.com/users/acoffman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acoffman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": {
      "url": "https://api.github.com/repos/rails/rails/milestones/31",
      "labels_url": "https://api.github.com/repos/rails/rails/milestones/31/labels",
      "id": 600488,
      "number": 31,
      "title": "4.0.9",
      "description": "",
      "creator": {
        "login": "rafaelfranca",
        "id": 47848,
        "avatar_url": "https://avatars.githubusercontent.com/u/47848?",
        "gravatar_id": "0525b332aafb83307b32d9747a93de03",
        "url": "https://api.github.com/users/rafaelfranca",
        "html_url": "https://github.com/rafaelfranca",
        "followers_url": "https://api.github.com/users/rafaelfranca/followers",
        "following_url": "https://api.github.com/users/rafaelfranca/following{/other_user}",
        "gists_url": "https://api.github.com/users/rafaelfranca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rafaelfranca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rafaelfranca/subscriptions",
        "organizations_url": "https://api.github.com/users/rafaelfranca/orgs",
        "repos_url": "https://api.github.com/users/rafaelfranca/repos",
        "events_url": "https://api.github.com/users/rafaelfranca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rafaelfranca/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 41,
      "closed_issues": 17,
      "state": "open",
      "created_at": "2014-03-17T16:51:45Z",
      "updated_at": "2014-07-12T18:30:43Z",
      "due_on": "2014-07-29T07:00:00Z"
    },
    "comments": 4,
    "created_at": "2014-02-21T20:48:25Z",
    "updated_at": "2014-03-17T16:51:48Z",
    "closed_at": null,
    "body": "Hello, I am porting a Rails 3.2.17 application to Rails 4.0.3 and have encountered what I believe to be a regression. It is similar though not identical to issue #13683. \r\n\r\nThe issue involves the generated table names for HABTM relationships where both models start with the same word.\r\n\r\nIf I have the following setup, the behavior seems to be incorrect in rails 4.\r\n\r\n```ruby```\r\nclass GeneClaim < ActiveRecord::Base\r\n  has_and_belongs_to_many :gene_claim_categories\r\nend\r\n\r\nclass GeneClaimCategory < ActiveRecord::Base\r\n  has_and_belongs_to_many :gene_claims\r\nend\r\n```\r\n\r\nWhenever trying to use the relationship, an incorrect table name is generated. In this case `gene_claim.gene_claim_categories ` will die because it tries to look for a table named `gene_claim_categories_claims` instead of the correct `gene_claim_categories_gene_claims`\r\n\r\nI have attached a gist (forked from the one in #13683) that reproduces this issue.\r\nhttps://gist.github.com/acoffman/9142889\r\n\r\nThanks!\r\nAdam"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14146",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14146/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14146/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14146/events",
    "html_url": "https://github.com/rails/rails/pull/14146",
    "id": 28056795,
    "number": 14146,
    "title": "Fix underscore inflector handling of namespaced and adjacent acronyms",
    "user": {
      "login": "chewi",
      "id": 35072,
      "avatar_url": "https://avatars.githubusercontent.com/u/35072?",
      "gravatar_id": "570ee005a5d5af0dcc6a92ccfb7d1be1",
      "url": "https://api.github.com/users/chewi",
      "html_url": "https://github.com/chewi",
      "followers_url": "https://api.github.com/users/chewi/followers",
      "following_url": "https://api.github.com/users/chewi/following{/other_user}",
      "gists_url": "https://api.github.com/users/chewi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chewi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chewi/subscriptions",
      "organizations_url": "https://api.github.com/users/chewi/orgs",
      "repos_url": "https://api.github.com/users/chewi/repos",
      "events_url": "https://api.github.com/users/chewi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chewi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activesupport",
        "name": "activesupport",
        "color": "FC9300"
      }
    ],
    "state": "open",
    "assignee": {
      "login": "fxn",
      "id": 3387,
      "avatar_url": "https://avatars.githubusercontent.com/u/3387?",
      "gravatar_id": "7223c62b7310e164eb79c740188abbda",
      "url": "https://api.github.com/users/fxn",
      "html_url": "https://github.com/fxn",
      "followers_url": "https://api.github.com/users/fxn/followers",
      "following_url": "https://api.github.com/users/fxn/following{/other_user}",
      "gists_url": "https://api.github.com/users/fxn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fxn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fxn/subscriptions",
      "organizations_url": "https://api.github.com/users/fxn/orgs",
      "repos_url": "https://api.github.com/users/fxn/repos",
      "events_url": "https://api.github.com/users/fxn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fxn/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 2,
    "created_at": "2014-02-21T17:11:02Z",
    "updated_at": "2014-04-16T21:58:32Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14146",
      "html_url": "https://github.com/rails/rails/pull/14146",
      "diff_url": "https://github.com/rails/rails/pull/14146.diff",
      "patch_url": "https://github.com/rails/rails/pull/14146.patch"
    },
    "body": "The underscore inflector regular expression was not working correctly\r\nfor namespaced acronyms that were not entirely uppercased\r\n(e.g. HTTP::RESTful) or adjacent acronyms (e.g. APIRESTful).\r\n\r\nI suspect that positive lookbehind would have been used in the\r\noriginal implementation had it been available in supported Ruby\r\nversions at the time. Now that Rails requires Ruby 1.9.2 or above,\r\nthis is no longer an issue.\r\n\r\nThanks to Pawel Kozlowski (khozlov) for highlighting the namespace\r\nissue in #8571."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14143",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14143/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14143/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14143/events",
    "html_url": "https://github.com/rails/rails/pull/14143",
    "id": 28054530,
    "number": 14143,
    "title": "Use type column first in multi-column indexes",
    "user": {
      "login": "derekprior",
      "id": 152152,
      "avatar_url": "https://avatars.githubusercontent.com/u/152152?",
      "gravatar_id": "79b1b001d5ff186c9bd02e7487aa4142",
      "url": "https://api.github.com/users/derekprior",
      "html_url": "https://github.com/derekprior",
      "followers_url": "https://api.github.com/users/derekprior/followers",
      "following_url": "https://api.github.com/users/derekprior/following{/other_user}",
      "gists_url": "https://api.github.com/users/derekprior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/derekprior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/derekprior/subscriptions",
      "organizations_url": "https://api.github.com/users/derekprior/orgs",
      "repos_url": "https://api.github.com/users/derekprior/repos",
      "events_url": "https://api.github.com/users/derekprior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/derekprior/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-02-21T16:41:05Z",
    "updated_at": "2014-03-28T18:26:33Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14143",
      "html_url": "https://github.com/rails/rails/pull/14143",
      "diff_url": "https://github.com/rails/rails/pull/14143.diff",
      "patch_url": "https://github.com/rails/rails/pull/14143.patch"
    },
    "body": "`add_reference` can very helpfully add a multi-column index when you use\r\nit to add a polymorphic reference. However, the first column in the\r\nindex is the `id` column, which is less than ideal.\r\n\r\nThe [PostgreSQL docs][1] say:\r\n> A multicolumn B-tree index can be used with query conditions that\r\n> involve any subset of the index's columns, but the index is most\r\n> efficient when there are constraints on the leading (leftmost)\r\n> columns.\r\n\r\nThe [MySQL docs][2] say:\r\n> MySQL can use multiple-column indexes for queries that test all the\r\n> columns in the index, or queries that test just the first column, the\r\n> first two columns, the first three columns, and so on. If you specify\r\n> the columns in the right order in the index definition, a single\r\n> composite index can speed up several kinds of queries on the same\r\n> table.\r\n\r\nIn a polymorphic relationship, the type column is much more likely to be\r\nuseful as the first column in an index than the id column. That is, I'm\r\nmore likely to query on type without an id than I am to query on id\r\nwithout a type.\r\n\r\n[1]: http://www.postgresql.org/docs/9.3/static/indexes-multicolumn.html\r\n[2]: http://dev.mysql.com/doc/refman/5.0/en/multiple-column-indexes.html"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14141",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14141/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14141/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14141/events",
    "html_url": "https://github.com/rails/rails/pull/14141",
    "id": 28048584,
    "number": 14141,
    "title": "Pass instance to I18n when translating error",
    "user": {
      "login": "printercu",
      "id": 1144890,
      "avatar_url": "https://avatars.githubusercontent.com/u/1144890?",
      "gravatar_id": "bfb334bdcd963ba9f7de6338b237db9b",
      "url": "https://api.github.com/users/printercu",
      "html_url": "https://github.com/printercu",
      "followers_url": "https://api.github.com/users/printercu/followers",
      "following_url": "https://api.github.com/users/printercu/following{/other_user}",
      "gists_url": "https://api.github.com/users/printercu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/printercu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/printercu/subscriptions",
      "organizations_url": "https://api.github.com/users/printercu/orgs",
      "repos_url": "https://api.github.com/users/printercu/repos",
      "events_url": "https://api.github.com/users/printercu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/printercu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activemodel",
        "name": "activemodel",
        "color": "00E5FF"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-02-21T15:20:35Z",
    "updated_at": "2014-02-23T09:27:10Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14141",
      "html_url": "https://github.com/rails/rails/pull/14141",
      "diff_url": "https://github.com/rails/rails/pull/14141.diff",
      "patch_url": "https://github.com/rails/rails/pull/14141.patch"
    },
    "body": "It'll allow to do like this:\r\n```ruby\r\n# inside model that has .title\r\nvalidates_numericality_of :quantity, greater_then: 0,\r\n  title: ->(h) { h[:instance].title }\r\n```\r\nwith translations\r\n```yaml\r\nerrors:\r\n  models:\r\n    my_model:\r\n      greater_then: of %{title} must be greater than %{count}\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14138",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14138/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14138/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14138/events",
    "html_url": "https://github.com/rails/rails/issues/14138",
    "id": 28036794,
    "number": 14138,
    "title": "Constant autoload with underscores",
    "user": {
      "login": "blackxored",
      "id": 133308,
      "avatar_url": "https://avatars.githubusercontent.com/u/133308?",
      "gravatar_id": "0c21d966c02665709ebff791484c09e9",
      "url": "https://api.github.com/users/blackxored",
      "html_url": "https://github.com/blackxored",
      "followers_url": "https://api.github.com/users/blackxored/followers",
      "following_url": "https://api.github.com/users/blackxored/following{/other_user}",
      "gists_url": "https://api.github.com/users/blackxored/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blackxored/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blackxored/subscriptions",
      "organizations_url": "https://api.github.com/users/blackxored/orgs",
      "repos_url": "https://api.github.com/users/blackxored/repos",
      "events_url": "https://api.github.com/users/blackxored/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blackxored/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/stale",
        "name": "stale",
        "color": "444444"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-02-21T11:52:01Z",
    "updated_at": "2014-05-27T16:29:03Z",
    "closed_at": null,
    "body": "Assuming we invoke ActiveSupport's underscore on class autoloading, this fails to handle cases where the class name is something like EAP, and the filename is e_a_p, this comes from generated scaffold. I know scaffold isn't used that much but beginners do and hence this is far from intuitive. ActiveSupport::Inflections doesn't appear to respond to #underscore hence we have no means of customizing what underscore returns, which obviously isn't what's expected. Ex:\r\n\r\n```ruby\r\n\"EAP\".underscore #=> \"eap\"\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14119",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14119/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14119/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14119/events",
    "html_url": "https://github.com/rails/rails/pull/14119",
    "id": 27939131,
    "number": 14119,
    "title": "Pass full source to compute_asset_host",
    "user": {
      "login": "dudeman",
      "id": 11475,
      "avatar_url": "https://avatars.githubusercontent.com/u/11475?",
      "gravatar_id": "c00515b23c257dfda9f205101dc8aaa1",
      "url": "https://api.github.com/users/dudeman",
      "html_url": "https://github.com/dudeman",
      "followers_url": "https://api.github.com/users/dudeman/followers",
      "following_url": "https://api.github.com/users/dudeman/following{/other_user}",
      "gists_url": "https://api.github.com/users/dudeman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dudeman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dudeman/subscriptions",
      "organizations_url": "https://api.github.com/users/dudeman/orgs",
      "repos_url": "https://api.github.com/users/dudeman/repos",
      "events_url": "https://api.github.com/users/dudeman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dudeman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionview",
        "name": "actionview",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-02-20T05:55:54Z",
    "updated_at": "2014-04-20T05:25:38Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14119",
      "html_url": "https://github.com/rails/rails/pull/14119",
      "diff_url": "https://github.com/rails/rails/pull/14119.diff",
      "patch_url": "https://github.com/rails/rails/pull/14119.patch"
    },
    "body": "Currently if the source contains a query string that string is not available when computing the asset host.\r\nThis commit merges the the tail back onto the source before passing it to the compute_asset_host that way any query string paramaters will be available when computing the asset host."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14110",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14110/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14110/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14110/events",
    "html_url": "https://github.com/rails/rails/issues/14110",
    "id": 27869432,
    "number": 14110,
    "title": "ActiveRecord: has_many through with foreign scope misses joining the table and generates wrong sql",
    "user": {
      "login": "doits",
      "id": 148003,
      "avatar_url": "https://avatars.githubusercontent.com/u/148003?",
      "gravatar_id": "97a9b245f76957b79bf7fb3fbbdac0bd",
      "url": "https://api.github.com/users/doits",
      "html_url": "https://github.com/doits",
      "followers_url": "https://api.github.com/users/doits/followers",
      "following_url": "https://api.github.com/users/doits/following{/other_user}",
      "gists_url": "https://api.github.com/users/doits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/doits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/doits/subscriptions",
      "organizations_url": "https://api.github.com/users/doits/orgs",
      "repos_url": "https://api.github.com/users/doits/repos",
      "events_url": "https://api.github.com/users/doits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/doits/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-02-19T12:01:05Z",
    "updated_at": "2014-05-27T21:58:23Z",
    "closed_at": null,
    "body": "See gist https://gist.github.com/doits/60b862bb45855b506ad9 for test template.\r\n\r\nBasically when going from model `Person` over `Houses` to `Colors`, where `Houses` is filtered by a scope `damaged` that joins `Conditions`, the generated SQL misses to join the table `Conditions`.\r\n\r\nThe generated SQL for getting `person.damaged_houses` is correctly joining the tables:\r\n\r\n```\r\n  SELECT \"houses\".* FROM \"houses\" \r\n    INNER JOIN \"conditions_houses\" ON \"conditions_houses\".\"house_id\" = \"houses\".\"id\"\r\n    INNER JOIN \"conditions\" ON \"conditions\".\"id\" = \"conditions_houses\".\"condition_id\"\r\n    WHERE \"houses\".\"person_id\" = ? AND \"conditions\".\"condition\" = 'damaged'\r\n```\r\n\r\nBut when selecting `person.damaged_colors`, the join is missed, only the condition is inserted:\r\n\r\n```\r\nSQLite3::SQLException: no such column: conditions.condition:\r\n  SELECT \"colors\".* FROM \"colors\"\r\n    INNER JOIN \"houses\" ON \"colors\".\"house_id\" = \"houses\".\"id\"\r\n    WHERE \"houses\".\"person_id\" = ? AND \"conditions\".\"condition\" = 'damaged'\r\n```\r\n\r\nIf I see it correctly, simply the join is missing, so the query should be:\r\n\r\n```\r\nSELECT \"colors\".* FROM \"colors\"\r\n  INNER JOIN \"houses\" ON \"colors\".\"house_id\" = \"houses\".\"id\"\r\n  INNER JOIN \"conditions_houses\" ON \"conditions_houses\".\"house_id\" = \"houses\".\"id\"\r\n  INNER JOIN \"conditions\" ON \"conditions\".\"id\" = \"conditions_houses\".\"condition_id\"\r\n  WHERE \"houses\".\"person_id\" = ? AND \"conditions\".\"condition\" = 'damaged'\r\n```\r\n\r\nIs this an ActiveRecord bug or am I doing it wrong?"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14104",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14104/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14104/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14104/events",
    "html_url": "https://github.com/rails/rails/issues/14104",
    "id": 27830905,
    "number": 14104,
    "title": "Sanitize helper method not working properly with html comments.",
    "user": {
      "login": "krunal",
      "id": 77296,
      "avatar_url": "https://avatars.githubusercontent.com/u/77296?",
      "gravatar_id": "437cb18db67ef5d03477cb9e575fda77",
      "url": "https://api.github.com/users/krunal",
      "html_url": "https://github.com/krunal",
      "followers_url": "https://api.github.com/users/krunal/followers",
      "following_url": "https://api.github.com/users/krunal/following{/other_user}",
      "gists_url": "https://api.github.com/users/krunal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/krunal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/krunal/subscriptions",
      "organizations_url": "https://api.github.com/users/krunal/orgs",
      "repos_url": "https://api.github.com/users/krunal/repos",
      "events_url": "https://api.github.com/users/krunal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/krunal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionview",
        "name": "actionview",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-02-18T21:49:05Z",
    "updated_at": "2014-04-26T21:42:02Z",
    "closed_at": null,
    "body": "Following is the example of sanitize method.\r\n\r\n```irb\r\n>> helper.sanitize(\"<!-- Script Start --><p>krunal test2</p>\")\r\n=> \"&lt;!-- Script Start --><p>krunal test2</p>\"\r\n```\r\n\r\nWe can see in the above code that \"html comment\" tag get changed in output."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14091",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14091/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14091/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14091/events",
    "html_url": "https://github.com/rails/rails/pull/14091",
    "id": 27795596,
    "number": 14091,
    "title": "Replace nil checks in Quoting with a NullColumn.",
    "user": {
      "login": "patricksrobertson",
      "id": 115316,
      "avatar_url": "https://avatars.githubusercontent.com/u/115316?",
      "gravatar_id": "718bd208935e684723eba028386f9a92",
      "url": "https://api.github.com/users/patricksrobertson",
      "html_url": "https://github.com/patricksrobertson",
      "followers_url": "https://api.github.com/users/patricksrobertson/followers",
      "following_url": "https://api.github.com/users/patricksrobertson/following{/other_user}",
      "gists_url": "https://api.github.com/users/patricksrobertson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/patricksrobertson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/patricksrobertson/subscriptions",
      "organizations_url": "https://api.github.com/users/patricksrobertson/orgs",
      "repos_url": "https://api.github.com/users/patricksrobertson/repos",
      "events_url": "https://api.github.com/users/patricksrobertson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/patricksrobertson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-02-18T14:11:37Z",
    "updated_at": "2014-02-18T19:27:07Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14091",
      "html_url": "https://github.com/rails/rails/pull/14091",
      "diff_url": "https://github.com/rails/rails/pull/14091.diff",
      "patch_url": "https://github.com/rails/rails/pull/14091.patch"
    },
    "body": "This commit takes the nil check in the Connection adapters and replaces it with an\r\nimplementation of the NullObject pattern to avoid uncessary code branching. I would\r\nhave preferred to inject the NullColumn object directly, instead of using a nilguard,\r\nbut was unable to locate the code that passes a nil argument into the quote method.\r\n\r\nEven without that injection, this eliminates three code branches that weren't necessary."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14088",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14088/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14088/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14088/events",
    "html_url": "https://github.com/rails/rails/pull/14088",
    "id": 27749951,
    "number": 14088,
    "title": "renames the primary key constraint on renaming table",
    "user": {
      "login": "rubydog",
      "id": 328673,
      "avatar_url": "https://avatars.githubusercontent.com/u/328673?",
      "gravatar_id": "69b5d0c77868c62f2ea8a4e429761d1b",
      "url": "https://api.github.com/users/rubydog",
      "html_url": "https://github.com/rubydog",
      "followers_url": "https://api.github.com/users/rubydog/followers",
      "following_url": "https://api.github.com/users/rubydog/following{/other_user}",
      "gists_url": "https://api.github.com/users/rubydog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rubydog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rubydog/subscriptions",
      "organizations_url": "https://api.github.com/users/rubydog/orgs",
      "repos_url": "https://api.github.com/users/rubydog/repos",
      "events_url": "https://api.github.com/users/rubydog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rubydog/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/PostgreSQL",
        "name": "PostgreSQL",
        "color": "fbca04"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-02-17T21:19:59Z",
    "updated_at": "2014-06-06T13:16:30Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14088",
      "html_url": "https://github.com/rails/rails/pull/14088",
      "diff_url": "https://github.com/rails/rails/pull/14088.diff",
      "patch_url": "https://github.com/rails/rails/pull/14088.patch"
    },
    "body": "Related to issue https://github.com/rails/rails/issues/12856\r\n\r\nCloses #12856"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14080",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14080/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14080/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14080/events",
    "html_url": "https://github.com/rails/rails/pull/14080",
    "id": 27702464,
    "number": 14080,
    "title": "Fixed problem with through association with STI. #14046",
    "user": {
      "login": "seeweer",
      "id": 40027,
      "avatar_url": "https://avatars.githubusercontent.com/u/40027?",
      "gravatar_id": "564069ff86ab396c1e79ba34231d154a",
      "url": "https://api.github.com/users/seeweer",
      "html_url": "https://github.com/seeweer",
      "followers_url": "https://api.github.com/users/seeweer/followers",
      "following_url": "https://api.github.com/users/seeweer/following{/other_user}",
      "gists_url": "https://api.github.com/users/seeweer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seeweer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seeweer/subscriptions",
      "organizations_url": "https://api.github.com/users/seeweer/orgs",
      "repos_url": "https://api.github.com/users/seeweer/repos",
      "events_url": "https://api.github.com/users/seeweer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seeweer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-02-17T09:42:35Z",
    "updated_at": "2014-02-20T10:24:24Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14080",
      "html_url": "https://github.com/rails/rails/pull/14080",
      "diff_url": "https://github.com/rails/rails/pull/14080.diff",
      "patch_url": "https://github.com/rails/rails/pull/14080.patch"
    },
    "body": "There were a problem with through association with STI  #14046\r\n\r\nThe problem was caused by `Foo.unscoped`. If model `Foo` was create via STI `Foo.unscoped.valuse[:where]` returns where condition to handle the STI logic.\r\n\r\nBut on through association on the first place we don't want to put this were clause to join table. I simply added check for `reflection.scope`. And if it is blank than simply skip this."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14071",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14071/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14071/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14071/events",
    "html_url": "https://github.com/rails/rails/pull/14071",
    "id": 27649671,
    "number": 14071,
    "title": "Fixes issue with process method not visible in integration tests",
    "user": {
      "login": "mauricio",
      "id": 5742,
      "avatar_url": "https://avatars.githubusercontent.com/u/5742?",
      "gravatar_id": "a91bd6cef23eb3516245a092e196c4da",
      "url": "https://api.github.com/users/mauricio",
      "html_url": "https://github.com/mauricio",
      "followers_url": "https://api.github.com/users/mauricio/followers",
      "following_url": "https://api.github.com/users/mauricio/following{/other_user}",
      "gists_url": "https://api.github.com/users/mauricio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mauricio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mauricio/subscriptions",
      "organizations_url": "https://api.github.com/users/mauricio/orgs",
      "repos_url": "https://api.github.com/users/mauricio/repos",
      "events_url": "https://api.github.com/users/mauricio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mauricio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2014-02-15T14:12:28Z",
    "updated_at": "2014-06-19T16:30:02Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14071",
      "html_url": "https://github.com/rails/rails/pull/14071",
      "diff_url": "https://github.com/rails/rails/pull/14071.diff",
      "patch_url": "https://github.com/rails/rails/pull/14071.patch"
    },
    "body": "Since `process` was private in `ActionDispatch::Integration::RequestHelpers::Session`, when you call `process` inside an integration test it would never call `process` at the current session as Ruby 2.0 and onwards only checks for public methods and `process` being private is always a false result when `method_missing` gets called inside `ActionDispatch::Integration::RequestHelpers::Runner`.\r\n\r\nMaking it public allows it to be called again inside integration tests and fixes rspec/rspec-rails#925."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14067",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14067/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14067/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14067/events",
    "html_url": "https://github.com/rails/rails/pull/14067",
    "id": 27644696,
    "number": 14067,
    "title": "Add documentation/tests around interpolated values in ActiveModel::Errors",
    "user": {
      "login": "tbloncar",
      "id": 2092395,
      "avatar_url": "https://avatars.githubusercontent.com/u/2092395?",
      "gravatar_id": "46d29d6a0ebbc4c41bc64eeb7267c451",
      "url": "https://api.github.com/users/tbloncar",
      "html_url": "https://github.com/tbloncar",
      "followers_url": "https://api.github.com/users/tbloncar/followers",
      "following_url": "https://api.github.com/users/tbloncar/following{/other_user}",
      "gists_url": "https://api.github.com/users/tbloncar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tbloncar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tbloncar/subscriptions",
      "organizations_url": "https://api.github.com/users/tbloncar/orgs",
      "repos_url": "https://api.github.com/users/tbloncar/repos",
      "events_url": "https://api.github.com/users/tbloncar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tbloncar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activemodel",
        "name": "activemodel",
        "color": "00E5FF"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-02-15T08:02:24Z",
    "updated_at": "2014-02-17T01:57:49Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14067",
      "html_url": "https://github.com/rails/rails/pull/14067",
      "diff_url": "https://github.com/rails/rails/pull/14067.diff",
      "patch_url": "https://github.com/rails/rails/pull/14067.patch"
    },
    "body": "Document and test :count option in #add and #added? methods. The purpose of this documentation is to make it clear that the #add and #added? methods should be invoked with the :count option for messages that make use of an interpolated count (by default). Failure to do so will result in an I18n::MissingInterpolationArgument exception."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14056",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14056/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14056/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14056/events",
    "html_url": "https://github.com/rails/rails/pull/14056",
    "id": 27585768,
    "number": 14056,
    "title": "SQLite3Adapter now checks for views in table_exists? fixes: 14041",
    "user": {
      "login": "girishso",
      "id": 35009,
      "avatar_url": "https://avatars.githubusercontent.com/u/35009?",
      "gravatar_id": "a493fbbd59bf4d36f9cb93c37ec00675",
      "url": "https://api.github.com/users/girishso",
      "html_url": "https://github.com/girishso",
      "followers_url": "https://api.github.com/users/girishso/followers",
      "following_url": "https://api.github.com/users/girishso/following{/other_user}",
      "gists_url": "https://api.github.com/users/girishso/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/girishso/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/girishso/subscriptions",
      "organizations_url": "https://api.github.com/users/girishso/orgs",
      "repos_url": "https://api.github.com/users/girishso/repos",
      "events_url": "https://api.github.com/users/girishso/events{/privacy}",
      "received_events_url": "https://api.github.com/users/girishso/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2014-02-14T10:17:07Z",
    "updated_at": "2014-02-14T11:35:06Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14056",
      "html_url": "https://github.com/rails/rails/pull/14056",
      "diff_url": "https://github.com/rails/rails/pull/14056.diff",
      "patch_url": "https://github.com/rails/rails/pull/14056.patch"
    },
    "body": "Added check for database views in `table_exists?` in SQLite3Adapter\r\n\r\nFixes #14041"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14055",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14055/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14055/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14055/events",
    "html_url": "https://github.com/rails/rails/pull/14055",
    "id": 27574431,
    "number": 14055,
    "title": "Fall back to filter_parameters when filter_redirect is not set for redirect log lines",
    "user": {
      "login": "trevorturk",
      "id": 402,
      "avatar_url": "https://avatars.githubusercontent.com/u/402?",
      "gravatar_id": "c0b6fb3807d7d4f255463ed168c75897",
      "url": "https://api.github.com/users/trevorturk",
      "html_url": "https://github.com/trevorturk",
      "followers_url": "https://api.github.com/users/trevorturk/followers",
      "following_url": "https://api.github.com/users/trevorturk/following{/other_user}",
      "gists_url": "https://api.github.com/users/trevorturk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trevorturk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trevorturk/subscriptions",
      "organizations_url": "https://api.github.com/users/trevorturk/orgs",
      "repos_url": "https://api.github.com/users/trevorturk/repos",
      "events_url": "https://api.github.com/users/trevorturk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trevorturk/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/actionpack",
        "name": "actionpack",
        "color": "FFF700"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/security",
        "name": "security",
        "color": "D94A4A"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": {
      "url": "https://api.github.com/repos/rails/rails/milestones/24",
      "labels_url": "https://api.github.com/repos/rails/rails/milestones/24/labels",
      "id": 297919,
      "number": 24,
      "title": "4.2.0",
      "description": "",
      "creator": {
        "login": "rafaelfranca",
        "id": 47848,
        "avatar_url": "https://avatars.githubusercontent.com/u/47848?",
        "gravatar_id": "0525b332aafb83307b32d9747a93de03",
        "url": "https://api.github.com/users/rafaelfranca",
        "html_url": "https://github.com/rafaelfranca",
        "followers_url": "https://api.github.com/users/rafaelfranca/followers",
        "following_url": "https://api.github.com/users/rafaelfranca/following{/other_user}",
        "gists_url": "https://api.github.com/users/rafaelfranca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rafaelfranca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rafaelfranca/subscriptions",
        "organizations_url": "https://api.github.com/users/rafaelfranca/orgs",
        "repos_url": "https://api.github.com/users/rafaelfranca/repos",
        "events_url": "https://api.github.com/users/rafaelfranca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rafaelfranca/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 72,
      "closed_issues": 66,
      "state": "open",
      "created_at": "2013-03-27T19:29:42Z",
      "updated_at": "2014-07-17T17:57:07Z",
      "due_on": "2014-10-01T07:00:00Z"
    },
    "comments": 1,
    "created_at": "2014-02-14T05:09:17Z",
    "updated_at": "2014-04-12T14:02:04Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14055",
      "html_url": "https://github.com/rails/rails/pull/14055",
      "diff_url": "https://github.com/rails/rails/pull/14055.diff",
      "patch_url": "https://github.com/rails/rails/pull/14055.patch"
    },
    "body": "See also https://github.com/rails/rails/pull/8404 and https://github.com/rails/rails/commit/86e3aaab939a67536f007d1633ec19521dba15e9\r\n\r\nI noticed that log lines for redirects were not filtered as I expected. I did a bit of searching and I see that we have a newish config option related to this that I wasn't aware of. It's a great option, but I propose that we fallback to params filtering when this new option is not used. \r\n\r\nI worked up a crude implementation (steals code from `filter_parameters` and doesn't include tests) to illustrate the point. I collected some example log lines that show the current/expected behavior. \r\n\r\nI'm happy to improve this PR if there's consensus that this is generally a good idea. \r\n\r\nThanks!\r\n\r\n-- Current behavior --\r\n\r\nRails.application.config.filter_parameters += [:password]\r\n\r\nStarted GET \"/\" for 127.0.0.1 at 2014-02-13 19:58:50 -0600\r\nProcessing by ApplicationController#one as HTML\r\nRedirected to http://localhost:3000/two?password=secret\r\nCompleted 302 Found in 15ms (ActiveRecord: 0.0ms)\r\n\r\nStarted GET \"/two?password=[FILTERED]\" for 127.0.0.1 at 2014-02-13 19:58:50 -0600\r\nProcessing by ApplicationController#two as HTML\r\n  Parameters: {\"password\"=>\"[FILTERED]\"}\r\nCompleted 200 OK in 0ms (ActiveRecord: 0.0ms)\r\n\r\nI expected the log line \"Redirected to http://localhost:3000/two?password=secret\" to be filtered.\r\n\r\n-- Expected behavior --\r\n\r\nStarted GET \"/\" for 127.0.0.1 at 2014-02-13 19:58:50 -0600\r\nProcessing by ApplicationController#one as HTML\r\nRedirected to http://localhost:3000/two?password=[FILTERED]\r\nCompleted 302 Found in 20ms (ActiveRecord: 0.0ms)\r\n\r\nI expected the log line to read: \"Redirected to http://localhost:3000/two?password=[FILTERED]\"\r\n\r\n-- Behavior with the newly introduced redirect filter --\r\n\r\nRails.application.config.filter_redirect << 'password'\r\n\r\nStarted GET \"/\" for 127.0.0.1 at 2014-02-13 19:58:50 -0600\r\nProcessing by ApplicationController#one as HTML\r\nRedirected to [FILTERED]\r\nCompleted 302 Found in 20ms (ActiveRecord: 0.0ms)\r\n\r\nWith the new redirect filter option in use, the entire URL is filtered: \"Redirected to [FILTERED]\"\r\n\r\n/cc @freegenie -- would love your feedback!"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14053",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14053/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14053/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14053/events",
    "html_url": "https://github.com/rails/rails/issues/14053",
    "id": 27553895,
    "number": 14053,
    "title": "original scaffolds.css.scss not beeing replaced by custom stylesheet",
    "user": {
      "login": "JGutierrezC",
      "id": 5317696,
      "avatar_url": "https://avatars.githubusercontent.com/u/5317696?",
      "gravatar_id": "0ef972c6ad7ccf0b050342cc620bb01c",
      "url": "https://api.github.com/users/JGutierrezC",
      "html_url": "https://github.com/JGutierrezC",
      "followers_url": "https://api.github.com/users/JGutierrezC/followers",
      "following_url": "https://api.github.com/users/JGutierrezC/following{/other_user}",
      "gists_url": "https://api.github.com/users/JGutierrezC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JGutierrezC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JGutierrezC/subscriptions",
      "organizations_url": "https://api.github.com/users/JGutierrezC/orgs",
      "repos_url": "https://api.github.com/users/JGutierrezC/repos",
      "events_url": "https://api.github.com/users/JGutierrezC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JGutierrezC/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/railties",
        "name": "railties",
        "color": "8BE06E"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-02-13T21:27:46Z",
    "updated_at": "2014-07-07T20:21:40Z",
    "closed_at": null,
    "body": "I have customized my views for scaffolding generation. The ones wich should be placed in \r\n\r\nroot/lib/templates/erb/scaffold/\r\n\r\nbut when i include a scaffolds.css or scaffolds.css.scss in that directory, the generated root/app/assets/stylesheets/scaffolds.css.scss is not beeing replaced by my custom css code,\r\n\r\nIs this an issue or something not possible?"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14046",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14046/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14046/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14046/events",
    "html_url": "https://github.com/rails/rails/issues/14046",
    "id": 27528610,
    "number": 14046,
    "title": "has_one :through eager loading using includes creates invalid SQL",
    "user": {
      "login": "mp-dhorsak",
      "id": 3533997,
      "avatar_url": "https://avatars.githubusercontent.com/u/3533997?",
      "gravatar_id": "79368ddc0d64df1c075426b282084cda",
      "url": "https://api.github.com/users/mp-dhorsak",
      "html_url": "https://github.com/mp-dhorsak",
      "followers_url": "https://api.github.com/users/mp-dhorsak/followers",
      "following_url": "https://api.github.com/users/mp-dhorsak/following{/other_user}",
      "gists_url": "https://api.github.com/users/mp-dhorsak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mp-dhorsak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mp-dhorsak/subscriptions",
      "organizations_url": "https://api.github.com/users/mp-dhorsak/orgs",
      "repos_url": "https://api.github.com/users/mp-dhorsak/repos",
      "events_url": "https://api.github.com/users/mp-dhorsak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mp-dhorsak/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/attached+PR",
        "name": "attached PR",
        "color": "006b75"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-02-13T15:56:48Z",
    "updated_at": "2014-04-28T13:19:26Z",
    "closed_at": null,
    "body": "In the case, where `has_one :through` refers to a model that is a child class, `includes` causes AR to create invalid SQL.\r\n\r\nMy gist is an example of this behaviour: https://gist.github.com/mp-dhorsak/8977542\r\n\r\nError: \r\n\r\n```\r\nActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: geographies.type: SELECT \"addresses\".* FROM \"addresses\"  WHERE \"geographies\".\"type\" IN ('Country') AND \"addresses\".\"user_id\" IN (1)\r\n```\r\n\r\nThe problem occurs in both Rails 4.0.2 and 4.1.0.beta1\r\n"
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14041",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14041/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14041/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14041/events",
    "html_url": "https://github.com/rails/rails/issues/14041",
    "id": 27522609,
    "number": 14041,
    "title": "SQLite3Adapter table_exists? returns false for SQL views",
    "user": {
      "login": "barriault",
      "id": 206941,
      "avatar_url": "https://avatars.githubusercontent.com/u/206941?",
      "gravatar_id": "449d7a5a5d90fbfc5b93a7256b59a402",
      "url": "https://api.github.com/users/barriault",
      "html_url": "https://github.com/barriault",
      "followers_url": "https://api.github.com/users/barriault/followers",
      "following_url": "https://api.github.com/users/barriault/following{/other_user}",
      "gists_url": "https://api.github.com/users/barriault/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/barriault/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/barriault/subscriptions",
      "organizations_url": "https://api.github.com/users/barriault/orgs",
      "repos_url": "https://api.github.com/users/barriault/repos",
      "events_url": "https://api.github.com/users/barriault/events{/privacy}",
      "received_events_url": "https://api.github.com/users/barriault/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      },
      {
        "url": "https://api.github.com/repos/rails/rails/labels/stale",
        "name": "stale",
        "color": "444444"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 6,
    "created_at": "2014-02-13T14:45:55Z",
    "updated_at": "2014-05-27T16:28:50Z",
    "closed_at": null,
    "body": "The ActiveRecord::ConnectionAdapters::SQLite3Adapter `table_exists?` method returns false when passed an SQL view."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14037",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14037/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14037/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14037/events",
    "html_url": "https://github.com/rails/rails/issues/14037",
    "id": 27497983,
    "number": 14037,
    "title": "Connection Pool should release internal DB resources",
    "user": {
      "login": "dnagir",
      "id": 195035,
      "avatar_url": "https://avatars.githubusercontent.com/u/195035?",
      "gravatar_id": "73ba2d202efab9804e1e344f2079f605",
      "url": "https://api.github.com/users/dnagir",
      "html_url": "https://github.com/dnagir",
      "followers_url": "https://api.github.com/users/dnagir/followers",
      "following_url": "https://api.github.com/users/dnagir/following{/other_user}",
      "gists_url": "https://api.github.com/users/dnagir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dnagir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dnagir/subscriptions",
      "organizations_url": "https://api.github.com/users/dnagir/orgs",
      "repos_url": "https://api.github.com/users/dnagir/repos",
      "events_url": "https://api.github.com/users/dnagir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dnagir/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 20,
    "created_at": "2014-02-13T06:50:56Z",
    "updated_at": "2014-04-17T02:17:08Z",
    "closed_at": null,
    "body": "When a connection is returned to the connection pool, the associated resources do not seem to be released (judging by the `search_path` in PostgreSQL being preserved).\r\n\r\nThis could be a major problem leaking state and the resources being held internally by the Database (potentially growing).\r\n\r\nI've discovered this trying to figure out a few things in the [other question](http://stackoverflow.com/questions/21746181/thread-safe-way-of-changing-the-connection-search-paths/21746309?noredirect=1#21746309).\r\n\r\nAs it was pointed out be one of the PostgreSQL gurus:\r\n\r\n> When you return connections to the pool, you must ensure the pool runs DISCARD ALL; to reset the connection state.\r\n\r\nThis is especially true if we'll look at dedicated pooling solutions, like `pgpool` that actually [uses](http://www.pgpool.net/docs/latest/pgpool-en.html) `ABORT; DISCARD ALL` commands before returning the connection to the pool."
  },
  {
    "url": "https://api.github.com/repos/rails/rails/issues/14030",
    "labels_url": "https://api.github.com/repos/rails/rails/issues/14030/labels{/name}",
    "comments_url": "https://api.github.com/repos/rails/rails/issues/14030/comments",
    "events_url": "https://api.github.com/repos/rails/rails/issues/14030/events",
    "html_url": "https://github.com/rails/rails/pull/14030",
    "id": 27453968,
    "number": 14030,
    "title": "Fixed a stack level too deep problem when validating a record.",
    "user": {
      "login": "Nerdman4U",
      "id": 6629940,
      "avatar_url": "https://avatars.githubusercontent.com/u/6629940?",
      "gravatar_id": "d9282ef52caf63bbefa66e990669a455",
      "url": "https://api.github.com/users/Nerdman4U",
      "html_url": "https://github.com/Nerdman4U",
      "followers_url": "https://api.github.com/users/Nerdman4U/followers",
      "following_url": "https://api.github.com/users/Nerdman4U/following{/other_user}",
      "gists_url": "https://api.github.com/users/Nerdman4U/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Nerdman4U/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Nerdman4U/subscriptions",
      "organizations_url": "https://api.github.com/users/Nerdman4U/orgs",
      "repos_url": "https://api.github.com/users/Nerdman4U/repos",
      "events_url": "https://api.github.com/users/Nerdman4U/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Nerdman4U/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/rails/rails/labels/activerecord",
        "name": "activerecord",
        "color": "0b02e1"
      }
    ],
    "state": "open",
    "assignee": null,
    "milestone": {
      "url": "https://api.github.com/repos/rails/rails/milestones/24",
      "labels_url": "https://api.github.com/repos/rails/rails/milestones/24/labels",
      "id": 297919,
      "number": 24,
      "title": "4.2.0",
      "description": "",
      "creator": {
        "login": "rafaelfranca",
        "id": 47848,
        "avatar_url": "https://avatars.githubusercontent.com/u/47848?",
        "gravatar_id": "0525b332aafb83307b32d9747a93de03",
        "url": "https://api.github.com/users/rafaelfranca",
        "html_url": "https://github.com/rafaelfranca",
        "followers_url": "https://api.github.com/users/rafaelfranca/followers",
        "following_url": "https://api.github.com/users/rafaelfranca/following{/other_user}",
        "gists_url": "https://api.github.com/users/rafaelfranca/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rafaelfranca/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rafaelfranca/subscriptions",
        "organizations_url": "https://api.github.com/users/rafaelfranca/orgs",
        "repos_url": "https://api.github.com/users/rafaelfranca/repos",
        "events_url": "https://api.github.com/users/rafaelfranca/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rafaelfranca/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 72,
      "closed_issues": 66,
      "state": "open",
      "created_at": "2013-03-27T19:29:42Z",
      "updated_at": "2014-07-17T17:57:07Z",
      "due_on": "2014-10-01T07:00:00Z"
    },
    "comments": 5,
    "created_at": "2014-02-12T17:58:36Z",
    "updated_at": "2014-07-14T12:26:56Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/rails/rails/pulls/14030",
      "html_url": "https://github.com/rails/rails/pull/14030",
      "diff_url": "https://github.com/rails/rails/pull/14030.diff",
      "patch_url": "https://github.com/rails/rails/pull/14030.patch"
    },
    "body": "Autosaved associations validates nested records and if there are\r\ninverse associations it will result a recursion. Solution is to\r\nmark valid records so that they can be skipped when inverse\r\nassociated records are validated."
  }
]
